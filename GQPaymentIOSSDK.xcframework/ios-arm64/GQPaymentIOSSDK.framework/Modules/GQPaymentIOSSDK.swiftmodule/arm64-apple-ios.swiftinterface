// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.1 effective-5.10 (swiftlang-6.1.0.110.21 clang-1700.0.13.3)
// swift-module-flags: -target arm64-apple-ios13.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-experimental-feature DebugDescriptionMacro -enable-bare-slash-regex -module-name GQPaymentIOSSDK
// swift-module-flags-ignorable: -no-verify-emitted-module-interface -interface-compiler-version 6.1
import CashfreePG
import CashfreePGCoreSDK
import CashfreePGUISDK
import Easebuzz
import Foundation
@_exported import GQPaymentIOSSDK
import Razorpay
import Swift
import UIKit
import WebKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@_Concurrency.MainActor public protocol GQPaymentDelegate {
  @_Concurrency.MainActor func gqSuccessResponse(data: [Swift.String : Any]?)
  @_Concurrency.MainActor func gqFailureResponse(data: [Swift.String : Any]?)
  @_Concurrency.MainActor func gqCancelResponse(data: [Swift.String : Any]?)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor public class GQPaymentSDK : GQPaymentIOSSDK.GQViewController {
  @_Concurrency.MainActor public var delegate: (any GQPaymentIOSSDK.GQPaymentDelegate)?
  @_Concurrency.MainActor public var clientJSONObject: [Swift.String : Any]?
  @_Concurrency.MainActor public var prefillJSONObject: [Swift.String : Any]?
  @_Concurrency.MainActor @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor public class GQViewController : UIKit.UIViewController {
  @_Concurrency.MainActor public func showLoader()
  @_Concurrency.MainActor public func hideLoader()
  @_Concurrency.MainActor @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
