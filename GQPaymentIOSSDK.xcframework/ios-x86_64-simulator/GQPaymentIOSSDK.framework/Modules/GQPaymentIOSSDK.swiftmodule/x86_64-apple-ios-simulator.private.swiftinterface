// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.0 effective-5.10 (swiftlang-6.0.0.9.10 clang-1600.0.26.2)
// swift-module-flags: -target x86_64-apple-ios13.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name GQPaymentIOSSDK
// swift-module-flags-ignorable: -no-verify-emitted-module-interface
import CashfreePG
import CashfreePGCoreSDK
import CashfreePGUISDK
import Easebuzz
import Foundation
@_exported import GQPaymentIOSSDK
import Razorpay
import Swift
import UIKit
import WebKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
public protocol GQPaymentDelegate {
  func gqSuccessResponse(data: [Swift.String : Any]?)
  func gqFailureResponse(data: [Swift.String : Any]?)
  func gqCancelResponse(data: [Swift.String : Any]?)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency public class GQPaymentSDK : GQPaymentIOSSDK.GQViewController {
  @_Concurrency.MainActor @preconcurrency public var delegate: (any GQPaymentIOSSDK.GQPaymentDelegate)?
  @_Concurrency.MainActor @preconcurrency public var clientJSONObject: [Swift.String : Any]?
  @_Concurrency.MainActor @preconcurrency public var prefillJSONObject: [Swift.String : Any]?
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency public class GQViewController : UIKit.UIViewController {
  @_Concurrency.MainActor @preconcurrency public func showLoader()
  @_Concurrency.MainActor @preconcurrency public func hideLoader()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
